import streamlit as st
import os
import time
import pandas as pd
from typing import Dict, Any, List, Optional
import logging
import json

# --- Configuration du Logging ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("streamlit_app")

# --- Variables d'√©tat (Session State) ---
def init_session_state():
    """Initialise les variables d'√©tat n√©cessaires pour l'application."""
    defaults = {
        'app_mode': "general",          # Mode actuel: "general" ou "dossier"
        'initialized': False,           # Statut d'initialisation du syst√®me RAG
        'chat_history': [],             # Historique de la conversation
        'is_processing': False,         # Indicateur de traitement en cours
        'rag_components': None,         # Composants du syst√®me RAG (graph, fonctions, etc.)
        'sources_expanded': False,      # √âtat de l'expandeur des sources
        'show_sources': True,           # Afficher/masquer les sources
        'show_db_results': True,        # Afficher/masquer les d√©tails des dossiers trouv√©s
        'last_result': None,            # Dernier r√©sultat obtenu du syst√®me RAG
        'error_message': None,          # Message d'erreur √† afficher
        'system_status_msg': "Syst√®me non initialis√©.", # Message d'√©tat du syst√®me
        'dossier_search_results': None # R√©sultats de la derni√®re recherche de dossier
    }
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value

# Initialiser l'√©tat de session au d√©marrage
init_session_state()

# --- Importation du Module RAG (Version R√©elle) ---
try:
    import rag_module 
    rag_import_success = True
    logger.info("Module RAG import√© avec succ√®s.")
except ImportError as e:
    rag_import_success = False
    error_message = f"Erreur d'importation du module RAG: {e}. Les fonctionnalit√©s RAG ne seront pas disponibles."
    logger.error(error_message)

    st.session_state.error_message = error_message
    
    st.error(error_message)


# --- Configuration de la Page Streamlit ---
st.set_page_config(
    page_title="Assistant KAP Num√©rique",
    page_icon="ü§ñ",  # Using an emoji as icon
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'mailto:support@kap-numerique.fr',
        'Report a bug': "mailto:support@kap-numerique.fr",
        'About': """
        **Assistant KAP Num√©rique v1.0**

        Cet assistant utilise un syst√®me RAG (Retrieval Augmented Generation)
        pour r√©pondre aux questions des instructeurs du dispositif KAP Num√©rique.
        Il peut fournir des informations g√©n√©rales ou sp√©cifiques √† un dossier.

        *Cr√©√© par Chahalane B√©riche*
        """
    }
)

# --- Styles CSS Personnalis√©s ---
st.markdown("""
<style>
    /* --- Base & Layout --- */
    .stApp {
        /* background-color: #ffffff; */ /* White background */
    }
    .stTabs [data-baseweb="tab-list"] {
		gap: 24px; /* Space between tabs */
	}
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        white-space: pre-wrap;
		background-color: transparent;
		border-radius: 4px 4px 0px 0px;
		gap: 1px;
		padding-top: 10px;
		padding-bottom: 10px;
    }
    .stTabs [aria-selected="true"] {
  		background-color: #0d6efd; /* Blue for active tab */
        color: white;
	}
    /* --- Sidebar --- */
    .stSidebar {
        /* background-color: #f8f9fa; /* Light gray background */
        /* border-right: 1px solid #dee2e6; */
    }
    .stSidebar .stButton button {
        background-color: #0d6efd; /* Blue buttons */
        color: white;
        border-radius: 0.3rem;
        transition: background-color 0.3s ease;
    }
    .stSidebar .stButton button:hover {
        background-color: #0b5ed7; /* Darker blue on hover */
    }
    .stSidebar .stExpander {
        border: 1px solid #dee2e6;
        border-radius: 0.3rem;
    }

    /* --- Chat --- */
    .stChatMessage {
        border-radius: 0.5rem;
        padding: 1rem 1.5rem;
        margin-bottom: 1rem;
        border: 1px solid transparent; /* Base border */
    }
    .stChatMessage[data-testid="chat-message-container-user"] {
        background-color: #e7f3ff; /* Light blue for user messages */
        border-left: 5px solid #0d6efd; /* Blue accent */
    }
    .stChatMessage[data-testid="chat-message-container-assistant"] {
        background-color: #f8f9fa; /* Light gray for assistant messages */
        border-left: 5px solid #ffc107; /* Yellow accent */
    }

    /* --- Sources & Details --- */
    .source-box {
        border-left: 4px solid #ffc107; /* Yellow accent for sources */
        padding: 0.5rem 1rem;
        margin-top: 0.5rem;
        background-color: #fffbeb; /* Very light yellow background */
        border-radius: 0.3rem;
        font-size: 0.9rem;
    }
    .dossier-details-box {
        border: 1px solid #cfe2ff; /* Light blue border */
        background-color: #f2f7ff; /* Very light blue background */
        padding: 1rem;
        border-radius: 0.5rem;
        margin-top: 1rem;
    }
     .dossier-active-banner {
        background-color: #d1ecf1; /* Light cyan background */
        color: #0c5460; /* Dark cyan text */
        padding: 10px 15px;
        border-radius: 5px;
        margin-bottom: 20px;
        border: 1px solid #bee5eb;
        display: flex;
        align-items: center;
        font-size: 0.95rem;
    }
    .dossier-active-banner span {
        margin-left: 10px;
    }

    /* --- Status Indicators --- */
    .system-status-badge {
        padding: 5px 12px;
        border-radius: 15px;
        font-size: 0.85rem;
        font-weight: 500;
        display: inline-block; /* To allow margin */
        margin-top: 10px; /* Align better with title */
    }
    .system-online {
        background-color: #d4edda; /* Green */
        color: #155724;
        border: 1px solid #c3e6cb;
    }
    .system-offline {
        background-color: #f8d7da; /* Red */
        color: #721c24;
        border: 1px solid #f5c6cb;
    }
     .system-initializing {
        background-color: #fff3cd; /* Yellow */
        color: #856404;
        border: 1px solid #ffeeba;
    }

    /* --- Footer --- */
    .footer {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        background-color: #0d6efd; /* Blue footer */
        color: white; /* White text */
        padding: 8px 0;
        text-align: center;
        font-size: 0.8rem;
        border-top: 1px solid #0b5ed7;
        z-index: 99; /* Ensure it's above other elements */
    }
    .footer a {
        color: #ffc107; /* Yellow links */
        text-decoration: none;
    }
     .footer a:hover {
        text-decoration: underline;
    }

    /* --- Misc --- */
     h1, h2, h3 {
        color: #0d6efd; /* Blue headers */
     }

</style>
""", unsafe_allow_html=True)

# --- Fonctions Utilitaires ---
def initialize_rag_system() -> bool:
    """
    Initialise le syst√®me RAG en appelant la fonction du module import√©.
    Affiche une barre de progression et des messages d'√©tat.

    Returns:
        bool: True si l'initialisation r√©ussit, False sinon.
    """
    if not rag_import_success:
        st.session_state.error_message = "Le module RAG n'a pas pu √™tre import√©. Impossible d'initialiser."
        st.session_state.system_status_msg = "√âchec Import RAG."
        logger.error("Tentative d'initialisation alors que l'import RAG a √©chou√©.")
        return False

    st.session_state.error_message = None
    st.session_state.system_status_msg = "Initialisation en cours..."
    st.session_state.initialized = False 

    progress_bar = st.progress(0)
    status_text = st.empty()
    status_text.info("üöÄ D√©marrage de l'initialisation du syst√®me RAG...")

    try:
        status_text.info("1/3 Pr√©paration de l'initialisation...")
        progress_bar.progress(25)
        time.sleep(0.3)

        status_text.info("2/3 Appel de la fonction d'initialisation RAG...")
        progress_bar.progress(60)
        # --- Appel de la Vfonction d'initialisation du module RAG---
        if hasattr(rag_module, 'init_rag_system') and callable(rag_module.init_rag_system):
             st.session_state.rag_components = rag_module.init_rag_system()
             
             if not isinstance(st.session_state.rag_components, dict) or 'graph' not in st.session_state.rag_components:
                 logger.warning("init_rag_system did not return a dictionary with a 'graph' key.")
        else:
             raise RuntimeError("Le module RAG import√© n'a pas de fonction 'init_rag_system' ex√©cutable.")
        # ----------------------------------------------------
        progress_bar.progress(90)
        time.sleep(0.5) 

        status_text.info("3/3 Finalisation et v√©rification...")
        progress_bar.progress(100)
        time.sleep(0.3)

        # Nettoyer les √©l√©ments temporaires
        status_text.success("‚úÖ Syst√®me RAG initialis√© avec succ√®s !")
        progress_bar.empty()
        time.sleep(1.5) 
        status_text.empty() 

        # Marquer comme initialis√©
        st.session_state.initialized = True
        st.session_state.system_status_msg = "Syst√®me op√©rationnel."
        logger.info("Syst√®me RAG initialis√© avec succ√®s via rag_module.init_rag_system.")
        return True

    except Exception as e:
        status_text.empty()
        progress_bar.empty()
        error_msg = f"‚ùå Erreur lors de l'initialisation du syst√®me RAG : {e}"
        st.session_state.error_message = error_msg
        st.session_state.system_status_msg = "√âchec de l'initialisation."
        logger.error(error_msg, exc_info=True)
        st.session_state.initialized = False
        st.session_state.rag_components = None 
        return False
    finally:
        try:
            progress_bar.empty()
        except Exception:
            pass
        try:
            status_text.empty()
        except Exception:
            pass


def save_chat_history():
    """Sauvegarde l'historique de conversation dans un fichier JSON."""
    try:
        history_dir = "./data/chat_history"
        os.makedirs(history_dir, exist_ok=True)
        timestamp = time.strftime("%Y%m%d-%H%M%S")
        filename = os.path.join(history_dir, f"chat_{timestamp}.json")

        with open(filename, "w", encoding="utf-8") as f:
            json.dump(st.session_state.chat_history, f, ensure_ascii=False, indent=2)

        logger.info(f"Historique de conversation sauvegard√© dans {filename}")
        return True, filename
    except Exception as e:
        logger.error(f"Erreur lors de la sauvegarde de l'historique : {e}", exc_info=True)
        return False, None

def load_chat_history(filename: str) -> bool:
    """Charge un historique de conversation depuis un fichier JSON."""
    try:
        with open(filename, "r", encoding="utf-8") as f:
            st.session_state.chat_history = json.load(f)
        logger.info(f"Historique charg√© depuis {filename}")

        st.session_state.last_result = None
        return True
    except FileNotFoundError:
        logger.error(f"Fichier historique non trouv√©: {filename}")
        st.session_state.error_message = f"Le fichier {filename} n'a pas √©t√© trouv√©."
        return False
    except json.JSONDecodeError:
        logger.error(f"Erreur de d√©codage JSON dans le fichier: {filename}")
        st.session_state.error_message = f"Le fichier {filename} est corrompu ou mal format√©."
        return False
    except Exception as e:
        logger.error(f"Erreur lors du chargement de l'historique : {e}", exc_info=True)
        st.session_state.error_message = f"Une erreur inattendue s'est produite lors du chargement: {e}"
        return False

#Fonction pour traiter la question de l'instructeur 
def process_user_query(query: str) -> str:
    """ 
    Traite la question de l'utilisateur en utilisant le syst√®me RAG.
    
    Args:
        query (str): La question pos√©e par l'utilisateur
        
    Returns:
        str: La r√©ponse g√©n√©r√©e par le syst√®me
    """
    if not st.session_state.initialized:
        return "Le syst√®me n'est pas encore initialis√©. Veuillez initialiser le syst√®me RAG depuis la barre lat√©rale."
    
    try:
        # Marquer comme en cours de traitement 
        st.session_state.is_processing = True 
        
        # Obtenir l'objet graph du RAG 
        graph = st.session_state.rag_components.get("graph")
        if not graph:
            return "Le graph RAG n'est pas initialis√© correctement. V√©rifiez la configuration du syst√®me."
          
        enhanced_query = query  # On utilise directement la requ√™te de l'utilisateur
    
        # √âtat initial pour le graph
        initial_state = {
            "question": enhanced_query,
            "context": [],
            "db_results": [],
            "answer": "",
            "history": st.session_state.chat_history[-5:] if len(st.session_state.chat_history) > 0 else []
        }
    
        # Ex√©cuter le graphe avec timeout pour √©viter les blocages
        start_time = time.time()
        result = graph.invoke(initial_state)
        processing_time = time.time() - start_time  # temps de traitement 
    
        logger.info(f"Requ√™te trait√©e en {processing_time:.2f} secondes")
        
        # Sauvegarder le r√©sultat pour affichage
        st.session_state.last_result = result
        # Ici, on retourne simplement la r√©ponse du syst√®me 
        return result["answer"]
    
    except Exception as e:
        error_msg = f"Une erreur s'est produite lors du traitement de votre demande : {str(e)}"
        logger.error(f"Erreur de traitement de la requ√™te: {e}", exc_info=True)
        return error_msg
    
    finally:
        # Marquer le traitement comme termin√© 
        st.session_state.is_processing = False 



def search_dossier(dossier_id: str) -> Optional[List[Dict]]:
    """
    Recherche un ou plusieurs dossiers sp√©cifiques via la fonction du module RAG.

    Args:
        dossier_id (str): L'identifiant (ou terme de recherche) du dossier.

    Returns:
        Optional[List[Dict]]: Une liste de dictionnaires contenant les donn√©es des dossiers trouv√©s, ou None en cas d'erreur.
    """
    if not st.session_state.initialized or not rag_import_success:
        st.error("Le syst√®me RAG n'est pas initialis√©. Veuillez l'activer depuis la barre lat√©rale.")
        return None
    if not st.session_state.rag_components or 'rechercher_dossier' not in st.session_state.rag_components:
         logger.error("Fonction 'rechercher_dossier' manquante dans st.session_state.rag_components.")
         st.error("La fonction de recherche de dossier est manquante dans les composants RAG.")
         return None

    try:
        # --- Appel de la fonction de recherche ---
        search_function = st.session_state.rag_components.get("rechercher_dossier")
        if not callable(search_function):
             logger.error("Le composant 'rechercher_dossier' n'est pas une fonction ex√©cutable.")
             st.error("Le composant 'rechercher_dossier' n'est pas une fonction ex√©cutable.")
             return None
        # ---------------------------------------------

        logger.info(f"Recherche r√©elle du dossier avec ID/terme: {dossier_id}")
        results = search_function(dossier_id) 
        logger.info(f"R√©sultats de la recherche r√©elle pour '{dossier_id}': {len(results)} trouv√©(s).")

        if not isinstance(results, list):
             logger.error(f"La fonction rechercher_dossier a retourn√© un type inattendu: {type(results)}")
             st.error("La recherche de dossier a retourn√© un format de donn√©es incorrect.")
             results = [] 

        st.session_state.dossier_search_results = results

        if not results:
            st.warning(f"Aucun dossier trouv√© correspondant √† '{dossier_id}'.")
            return []
        else:
             # Return the list of found dossiers
             return results

    except Exception as e:
        logger.error(f"Erreur lors de la recherche r√©elle du dossier '{dossier_id}': {e}", exc_info=True)
        st.error(f"Une erreur s'est produite lors de la recherche du dossier : {str(e)}")
        st.session_state.dossier_search_results = None
        return None

#Fonction pour formater et afficher une source 
def display_source(source, index):
    """ 
    Affiche une source de mani√®re format√©e
    """
    st.markdown(f"**Source {index+1}:** *{source.metadata.get('source','Document interne')}*")
    
    #Affichage des m√©tadonn√©es importantes 
    if source.metadata:
        metadata_str = ",".join([f"{k}: {v}" for k,v in source.metadata.items() if k not in ['source','content','text'] and v])
        
        if metadata_str:
            st.caption(metadata_str)
            
    #Affiche le contenu avec mise en evidence si court, sinon avec expanseur
    content = source.page_content
    if len(content) > 500:
        with st.expander("Voir le contenu complet"):
            st.markdown(f'<div class="source-box">{content}</div>',unsafe_allow_html=True)
        st.text(content[:500] + "...")
    else:
        st.markdown(f'<div class="source-box">{content}</div>', unsafe_allow_html=True)
        
    st.markdown("---")


def display_dossier_summary(dossier: Dict):
    """Affiche un r√©sum√© compact d'un dossier."""
    st.markdown(f"""
    <div class="dossier-details-box">
        <h4>Dossier #{dossier.get('Numero', 'N/A')}</h4>
        <p>
            <strong>Usager:</strong> {dossier.get('nom_usager', 'N/A')} |
            <strong>Statut:</strong> {dossier.get('statut', 'N/A')} |
            <strong>Montant:</strong> {dossier.get('montant', 'N/A')} ‚Ç¨ |
            <strong>Cr√©ation:</strong> {dossier.get('date_creation', 'N/A')}
        </p>
    </div>
    """, unsafe_allow_html=True)

def display_dossier_details(dossier: Dict):
    """Affiche les d√©tails complets d'un dossier dans un DataFrame."""
    st.markdown("---")
    st.subheader(f"D√©tails du Dossier #{dossier.get('Numero', 'N/A')}")
    
    # Convertir le dictionnaire du dossier en DataFrame pour une meilleure affichage (transpos√©)
    try:
        # Filtrer les valeurs scalaires pour cr√©er le DataFrame
        displayable_dossier = {k: v for k, v in dossier.items() if isinstance(v, (str, int, float, bool))}
        df_dossier = pd.DataFrame.from_dict(displayable_dossier, orient='index', columns=['Valeur'])
        df_dossier.index.name = "Champ"
        st.dataframe(df_dossier, use_container_width=True)
    except Exception as e:
        logger.error(f"ERREUR lors de la cr√©ation du DataFrame Pour les details du dossiers: {e}")
        st.warning("Impossible d'afficher les d√©tails du dossier sous forme de tableau.")
        st.json(dossier)  # Affichage en JSON si la conversion √©choue

    # Bouton pour poser une question sur le dossier
    # NOTE : La fonctionnalit√© de d√©finir ce dossier comme "actif" a √©t√© supprim√©e.
    dossier_num = dossier.get('Numero', '')
    if st.button(f"‚ùì Poser une question sur ce dossier ({dossier_num})", key=f"ask_about_{dossier_num}"):
        # Vous pouvez choisir d'effectuer une action ici sans d√©finir le dossier comme actif.
        # Par exemple, vous pouvez pr√©-remplir la zone de texte de la question ou effectuer une autre action.
        question = f"Peux-tu me donner plus de d√©tails sur le dossier {dossier_num} ?"
        st.session_state.chat_history.append({"role": "user", "content": question})
        st.rerun()  # Red√©marrer pour traiter la question



# ===== INTERFACE PRINCIPALE =====

# --- Barre Lat√©rale  ---
with st.sidebar:
    st.image("logo_region_reunion.png", width=150) #  Logo
    st.header("‚öôÔ∏è Contr√¥le Syst√®me")

    # Section Initialisation
    with st.expander("üöÄ Initialisation RAG", expanded=not st.session_state.initialized):
        if not st.session_state.initialized:
            
            if not rag_import_success:
                 st.error("√âchec de l'import du module RAG. V√©rifiez la configuration et les logs.")
            else:
                 st.warning("Le syst√®me RAG doit √™tre initialis√©.")
                 if st.button("üîµ Initialiser le Syst√®me RAG", use_container_width=True, key="init_button"):
                     with st.spinner("Initialisation en cours..."):
                          initialize_rag_system()
                          st.rerun() 
        else:
            st.success("‚úÖ Syst√®me RAG Op√©rationnel")
            if st.button("üîÑ R√©initialiser", use_container_width=True, key="reinit_button"):
                 # Reset relevant state variables
                 st.session_state.initialized = False
                 st.session_state.rag_components = None
                 st.session_state.active_dossier = None
                 st.session_state.chat_history = []
                 st.session_state.last_result = None
                 st.session_state.system_status_msg = "Syst√®me non initialis√©."
                 logger.info("Syst√®me RAG r√©initialis√© par l'utilisateur.")
                 st.warning("Syst√®me marqu√© pour r√©initialisation. Cliquez sur 'Initialiser'.")
                 st.rerun()


        # Afficher le message d'√©tat
        status_class = "system-offline"
        if "Initialisation en cours" in st.session_state.system_status_msg:
             status_class = "system-initializing"
        elif st.session_state.initialized:
             status_class = "system-online"
        elif "√âchec" in st.session_state.system_status_msg: 
             status_class = "system-offline"

        st.markdown(f'<div class="system-status-badge {status_class}">{st.session_state.system_status_msg}</div>', unsafe_allow_html=True)


    # Section √âtat du Syst√®me 
    if st.session_state.initialized and st.session_state.rag_components and isinstance(st.session_state.rag_components, dict):
        with st.expander("üìä √âtat du Syst√®me", expanded=False):
            components = st.session_state.rag_components
         
            db_connected = components.get("db_connected", None) 
            if db_connected is True:
                st.markdown("‚úîÔ∏è <span style='color:green;'>Connect√© √† la base de donn√©es</span>", unsafe_allow_html=True)
            elif db_connected is False:
                st.markdown("‚ö†Ô∏è <span style='color:orange;'>Base de donn√©es non connect√©e</span>", unsafe_allow_html=True)
          
            docs = components.get("docs", []) 
            if isinstance(docs, list):
                 st.info(f"üìÑ {len(docs)} documents charg√©s (selon init_rag_system).")

                 doc_categories = {}
                 for doc in docs:
                     
                    if isinstance(doc, dict):
                         meta = doc.get("metadata", {})
                         if isinstance(meta, dict):
                              category = meta.get("category", "Non classifi√©")
                              doc_categories[category] = doc_categories.get(category, 0) + 1

                 if doc_categories:
                    st.markdown("##### R√©partition des Documents (Exemple)")
                    try:
                         chart_data = pd.DataFrame({
                            'Cat√©gorie': list(doc_categories.keys()),
                            'Nombre': list(doc_categories.values())
                         })
                         st.bar_chart(chart_data.set_index('Cat√©gorie'), use_container_width=True)
                    except Exception as chart_e:
                         logger.warning(f"Could not generate document category chart: {chart_e}")

            perf = components.get("performance", {}) 
            if isinstance(perf, dict):
                 avg_time = perf.get('avg_response_time', None)
                 if avg_time is not None:
                      st.metric(label="Temps de r√©ponse moyen (simul√©)", value=f"{avg_time:.2f} s")


    # Section Options d'Affichage
    with st.expander("üëÅÔ∏è Options d'Affichage", expanded=True):
        st.session_state.show_sources = st.toggle("Afficher les sources cit√©es", value=st.session_state.show_sources, key="toggle_sources")
        st.session_state.show_db_results = st.toggle("Afficher les d√©tails des dossiers trouv√©s", value=st.session_state.show_db_results, key="toggle_db_details")
        st.session_state.sources_expanded = st.toggle("D√©velopper les sources par d√©faut", value=st.session_state.sources_expanded, key="toggle_expand_sources")

    # Section Gestion de l'Historique
    with st.expander("üïí Gestion de l'Historique", expanded=False):
        col_hist1, col_hist2 = st.columns(2)
        with col_hist1:
            if st.button("üíæ Sauvegarder", use_container_width=True, key="save_hist"):
                success, filename = save_chat_history()
                if success:
                    st.success(f"Historique sauvegard√©: `{filename}`")
                else:
                    st.error("√âchec de la sauvegarde.")
        with col_hist2:
             if st.button("üóëÔ∏è Effacer", use_container_width=True, key="clear_hist"):
                if st.session_state.chat_history:
                    st.session_state.chat_history = []
                    st.session_state.last_result = None
                    st.session_state.active_dossier = None
                    st.success("Historique effac√©.")
                    st.rerun()
                else:
                     st.info("L'historique est d√©j√† vide.")

    # Section Aide
    with st.expander("‚ùì Aide", expanded=False):
        st.markdown("""
        **Comment utiliser l'assistant :**
        1.  Cliquez sur **Initialiser le Syst√®me RAG**.
        2.  Utilisez l'onglet **Questions G√©n√©rales** pour des infos sur le dispositif.
        3.  Utilisez l'onglet **Consultation de Dossier** pour rechercher un dossier sp√©cifique par son num√©ro et poser des questions dessus.
        4.  Le dossier recherch√© devient le **dossier actif** pour les questions suivantes dans cet onglet.

        **Exemples de questions :**
        * *G√©n√©ral:* "Quels sont les crit√®res d'√©ligibilit√© ?"
        * *Dossier (apr√®s recherche):* "Quel est le statut actuel de ce dossier ?"
        * *Dossier (apr√®s recherche):* "Y a-t-il des documents manquants ?"
        """)

    # Affichage permanent des erreurs
    if st.session_state.error_message:
        st.error(f"üö® Erreur: {st.session_state.error_message}")
        if st.button("‚ùå Effacer le message d'erreur", key="clear_error_btn"):
            st.session_state.error_message = None
            st.rerun()


# --- Zone Principale ---

st.title("ü§ñ Assistant KAP Num√©rique")
st.caption("Votre assistant intelligent pour le dispositif KAP Num√©rique.")

# D√©finir les onglets pour les modes
tab_general, tab_dossier = st.tabs(["üí¨ Questions G√©n√©rales", "üìÅ Consultation de Dossier"])

# --- Onglet Questions G√©n√©rales ---
with tab_general:
    st.header("Posez une question g√©n√©rale")
    st.markdown("Utilisez cette section pour des questions sur le fonctionnement g√©n√©ral du dispositif, les proc√©dures, les crit√®res, etc.")

    # Indicateur si un dossier est actif

    # Conteneur pour l'historique du chat
    chat_container_general = st.container(height=500) 
    with chat_container_general:
        if not st.session_state.chat_history:
       
            welcome_msg = "üëã Bonjour ! Posez-moi une question sur le dispositif KAP Num√©rique."
            if not rag_import_success:
                 welcome_msg = "‚ö†Ô∏è Le module RAG n'a pas pu √™tre charg√©. Fonctionnalit√©s limit√©es."
            elif not st.session_state.initialized:
                 welcome_msg = "üëã Bonjour ! Veuillez initialiser le syst√®me RAG depuis la barre lat√©rale."
            st.info(welcome_msg)
        else:
       
            for message in st.session_state.chat_history:
                avatar = "üë§" if message["role"] == "user" else "ü§ñ"
                with st.chat_message(message["role"], avatar=avatar):
                    st.write(message["content"]) 

    # Affichage des sources et d√©tails si applicable au dernier message 
    if st.session_state.last_result and isinstance(st.session_state.last_result, dict):

         if st.session_state.app_mode == "general":
             # Afficher les sources si activ√©
            sources = st.session_state.last_result.get('context', []) 
            
            #Affiche la liste des sources
            if st.session_state.show_sources and isinstance(sources, list) and sources:
                    with st.expander("üìö Sources consult√©es", expanded=st.session_state.sources_expanded):
                        context = st.session_state.last_result["context"]
                        if context:
                            st.markdown(f"### {len(context)} sources utilis√©es pour g√©n√©rer la r√©ponse")
                            
                            #option d'affichage des sources
                            view_mode = st.radio("Mode d'affichage", ("Liste d√©tail√©e"), horizontal=True)
                            
                            if view_mode == "Liste d√©taill√©e":
                                for i, source in enumerate(context):
                                    display_source(source, i)
                            else:
                                # Cr√©er un DataFrame avec les sources pour une vue compacte
                                source_data = []
                                for i, source in enumerate(context):
                                    source_data.append({
                                        "Source":source.metadata.get("source","Document interne"),
                                        "Type": source.metadata.get("type","non sp√©cifi√©"),
                                        "Contenu": source.page_content[:100] + "..." if len(source.page_content) > 100 else source.page_content,
                                    })
                                if source_data:
                                    st.dataframe(pd.DataFrame(source_data), use_container_width=True)
                        else:
                            st.info("Aucune source disponible pour cette requ√™te.")

            # Afficher les d√©tails des dossiers trouv√©s si activ√© 
            db_results = st.session_state.last_result.get('db_results', []) 
            if st.session_state.show_db_results and isinstance(db_results, list) and db_results:
                 with st.expander("üìã Dossiers Mentionn√©s", expanded=True):
                     st.caption("La derni√®re r√©ponse a potentiellement utilis√© des informations des dossiers suivants :")
                     for dossier in db_results:
                         if isinstance(dossier, dict):
                              display_dossier_summary(dossier)
                              dossier_num = dossier.get('Numero', '')
                  
                              if st.button(f"üîç Consulter ce dossier (#{dossier_num})", key=f"switch_to_{dossier_num}"):
                                  st.session_state.active_dossier = dossier
                                  st.session_state.app_mode = "dossier"
                                  st.info(f"Dossier #{dossier_num} d√©fini comme actif. Allez √† l'onglet 'Consultation de Dossier' pour interagir.")
                                  time.sleep(2)
                                  st.rerun()
                         else:
                              st.warning(f"Format de r√©sultat de dossier inattendu: {type(dossier)}")


        
# --- Onglet Consultation de Dossier ---
with tab_dossier:
    st.header("Rechercher et consulter un dossier sp√©cifique")
    st.markdown("Entrez un num√©ro de dossier pour le rechercher.")

    # Zone de recherche de dossier
    search_col, btn_col = st.columns([4, 1])
    with search_col:
        dossier_search_input = st.text_input(
            "Num√©ro de dossier (ex: 82-2069)",
            key="dossier_search_input",
            placeholder="Entrez le num√©ro exact du dossier...",
            label_visibility="collapsed"
        )
    with btn_col:
        search_button = st.button(
            "üîé Rechercher",
            key="search_dossier_button",
            use_container_width=True,
            disabled=not st.session_state.initialized or not dossier_search_input
        )

    # Logique de recherche et affichage des r√©sultats
    if search_button and dossier_search_input:
        with st.spinner(f"Recherche du dossier '{dossier_search_input}'..."):
            found_dossiers = search_dossier(dossier_search_input)  # Met √† jour st.session_state.dossier_search_results
            if found_dossiers:  # V√©rifier que la liste n'est pas vide et contient des dictionnaires
                if isinstance(found_dossiers[0], dict):
                    st.success(f"{len(found_dossiers)} dossier(s) trouv√©(s) pour '{dossier_search_input}'.")
                    # Affichage de la liste des dossiers trouv√©s
                    for dossier in found_dossiers:
                        st.markdown("---")
                        display_dossier_details(dossier)
                else:
                    st.error("Format de donn√©es invalide retourn√© par la recherche.")
            # La fonction search_dossier g√®re d√©j√† l'affichage d'un avertissement en cas d'aucun r√©sultat.

    # Si aucun dossier n'est recherch√©, on affiche un message informatif
    if not search_button:
        st.info("Recherchez un dossier en entrant son num√©ro ci-dessus.")

# --- Traitement Centralis√© des Questions (apr√®s rerun) ---
# Ce bloc s'ex√©cute apr√®s un √©ventuel d√©clenchement par l'envoi d'une question
if st.session_state.chat_history and st.session_state.chat_history[-1]["role"] == "user" and not st.session_state.is_processing:
    last_query = st.session_state.chat_history[-1]["content"]

    spinner_msg = "üß† Traitement de la question..."
    with st.spinner(spinner_msg):
        response = process_user_query(last_query)  # La fonction process_user_query n'utilise plus de dossier actif
    st.session_state.chat_history.append({"role": "assistant", "content": response})
    st.rerun()  # Rerun pour afficher la r√©ponse

# Zone de saisie du chat g√©n√©ral (utilis√©e √©galement pour des questions concernant un dossier, sans que celui-ci devienne actif)
prompt = st.chat_input(
    "Posez votre question...",
    key="chat_input",
    disabled=not st.session_state.initialized or st.session_state.is_processing
)
if prompt:
    st.session_state.chat_history.append({"role": "user", "content": prompt})
    st.rerun()



# --- Footer ---
st.markdown("""
<div class="footer">
    ¬© 2025 KAP Num√©rique - Assistant RAG v1.0
    <a href="mailto:support@kap-numerique.fr" target="_blank">Assistance</a>
</div>
""", unsafe_allow_html=True)
